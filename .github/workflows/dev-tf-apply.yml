name: 'Dev - Frontend Terraform Apply'

on:
  push:
    branches:
      - dev
    paths:
      - 'dev/**'
  pull_request:
    branches:
      - dev
    paths:
      - 'dev/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    environment: Development
    
    defaults:
      run:
        working-directory: ./dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_DEV_ACCOUNT }}:role/oidc-inff-frontend-infrastructure
        aws-region: ap-southeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"

    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        if ! terraform plan -no-color -out=tfplan; then
          LOCK_ID=$(terraform show -json .terraform.lock.hcl 2>/dev/null | jq -r '.Id' || echo "")
          if [ ! -z "$LOCK_ID" ]; then
            echo "Found stale lock, waiting for 60 seconds and retrying..."
            sleep 60
            terraform plan -no-color -out=tfplan
          else
            echo "::error::Terraform plan failed for reasons other than locking"
            exit 1
          fi
        fi
        terraform show -no-color tfplan > tfplan.txt


    - name: Post Plan to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const output = require('fs').readFileSync('dev/tfplan.txt', 'utf8');
          const comment = `### Terraform Plan Output\n\`\`\`hcl\n${output}\n\`\`\``;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
      run: |
        if ! terraform apply -auto-approve tfplan; then
          echo "::error::Terraform apply failed"
          exit 1
        fi

    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const message = `‚ùå Terraform operation failed in ${process.env.GITHUB_WORKFLOW}
          
          Workflow: [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
          
          if (context.issue.number) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }

    - name: Cleanup
      if: always()
      run: |
        rm -f tfplan tfplan.txt || true
